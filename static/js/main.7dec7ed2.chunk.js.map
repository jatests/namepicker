{"version":3,"sources":["App.tsx","index.tsx"],"names":["TEST_NAMES","App","useState","names","setNames","newName","setNewName","lastPickedName","setLastPickedName","randomNameAlertIsOpen","setRandomNameAlertIsOpen","addNewNameDialogIsOpen","setAddNewNameDialogIsOpen","closeAddNewNameDialog","id","isOpen","onClose","canEscapeKeyCancel","canOutsideClickCancel","className","Classes","HEADING","title","style","width","onSubmit","event","preventDefault","DIALOG_BODY","type","INPUT","LARGE","join","autoFocus","value","onChange","e","target","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","intent","icon","onClick","pickedName","Math","floor","random","length","disabled","map","name","index","elevation","Elevation","TWO","filter","_","i","removeName","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAUMA,EAAa,CAAC,QAAS,MAAO,SAuGrBC,MArGf,WAAgB,IAAD,EACaC,mBAAmBF,GADhC,mBACNG,EADM,KACCC,EADD,OAEiBF,mBAAiB,IAFlC,mBAENG,EAFM,KAEGC,EAFH,OAG+BJ,qBAH/B,mBAGNK,EAHM,KAGUC,EAHV,OAI6CN,oBAAS,GAJtD,mBAINO,EAJM,KAIiBC,EAJjB,OAK+CR,oBAAS,GALxD,mBAKNS,EALM,KAKkBC,EALlB,KAWb,SAASC,IACPP,EAAW,IACXM,GAA0B,GAuB5B,OACE,yBAAKE,GAAG,OACN,kBAAC,IAAD,CACEC,OAAQN,EACRO,QAAS,kBAAMN,GAAyB,IACxCO,oBAAkB,EAClBC,uBAAqB,GAErB,2CACA,wBAAIC,UAAWC,IAAQC,SAAUd,IAGnC,kBAAC,IAAD,CACEe,MAAM,eACNP,OAAQJ,EACRK,QAASH,EACTU,MAAO,CAAEC,MAAO,MAEhB,0BAAMC,SAtCZ,SAA6BC,GAC3BA,EAAMC,iBACNvB,EAAS,GAAD,mBAAKD,GAAL,CAAYE,KACpBQ,MAoCM,yBAAKM,UAAWC,IAAQQ,aACtB,2BACE,iDAEF,2BACEC,KAAK,OACLV,UAAW,CAACC,IAAQU,MAAOV,IAAQW,OAAOC,KAAK,KAC/CT,MAAO,CAAEC,MAAO,QAChBS,WAAS,EACTC,MAAO7B,EACP8B,SAAU,SAACC,GAAD,OAAO9B,EAAW8B,EAAEC,OAAOH,WAGzC,yBAAKf,UAAWC,IAAQkB,eACtB,yBAAKnB,UAAWC,IAAQmB,uBACtB,kBAAC,IAAD,CAAQC,OAAO,UAAUX,KAAK,UAA9B,WAQR,kBAAC,IAAD,CAAQY,KAAK,OAAOC,QAvExB,WACE9B,GAA0B,KAsExB,gBAGA,kBAAC,IAAD,CACE6B,KAAK,SACLC,QAzDN,WACE,IAAIC,EACJ,GACEA,EAAaxC,EAAMyC,KAAKC,MAAMD,KAAKE,SAAW3C,EAAM4C,eAC7CJ,IAAepC,GAExBC,EAAkBmC,GAClBjC,GAAyB,IAmDrBsC,SAAU7C,EAAM4C,OAAS,GAH3B,oBAQA,yBAAKjC,GAAG,aACLX,EAAM8C,KAAI,SAACC,EAAMC,GAAP,OACT,kBAAC,IAAD,CAAMC,UAAWC,IAAUC,KACzB,wBAAInC,UAAWC,IAAQC,SAAU6B,GACjC,kBAAC,IAAD,CAAQR,QAAS,kBAvE3B,SAAoBS,GAClB/C,EAASD,EAAMoD,QAAO,SAACC,EAAGC,GAAJ,OAAUA,IAAMN,MAsEPO,CAAWP,KAAlC,iBCjGZQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.7dec7ed2.chunk.js","sourcesContent":["import React, { useState, FormEvent } from 'react'\nimport {\n  Button,\n  Card,\n  Alert,\n  Dialog,\n  Classes,\n  Elevation,\n} from '@blueprintjs/core'\n\nconst TEST_NAMES = ['Alice', 'Bob', 'Carol']\n\nfunction App() {\n  const [names, setNames] = useState<string[]>(TEST_NAMES)\n  const [newName, setNewName] = useState<string>('')\n  const [lastPickedName, setLastPickedName] = useState<string>()\n  const [randomNameAlertIsOpen, setRandomNameAlertIsOpen] = useState(false)\n  const [addNewNameDialogIsOpen, setAddNewNameDialogIsOpen] = useState(false)\n\n  function addNewName() {\n    setAddNewNameDialogIsOpen(true)\n  }\n\n  function closeAddNewNameDialog() {\n    setNewName('')\n    setAddNewNameDialogIsOpen(false)\n  }\n\n  function finishAddingNewName(event: FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n    setNames([...names, newName])\n    closeAddNewNameDialog()\n  }\n\n  function removeName(index: number) {\n    setNames(names.filter((_, i) => i !== index))\n  }\n\n  function pickRandomName() {\n    let pickedName\n    do {\n      pickedName = names[Math.floor(Math.random() * names.length)]\n    } while (pickedName === lastPickedName)\n\n    setLastPickedName(pickedName)\n    setRandomNameAlertIsOpen(true)\n  }\n\n  return (\n    <div id=\"app\">\n      <Alert\n        isOpen={randomNameAlertIsOpen}\n        onClose={() => setRandomNameAlertIsOpen(false)}\n        canEscapeKeyCancel\n        canOutsideClickCancel\n      >\n        <p>Picked name:</p>\n        <h2 className={Classes.HEADING}>{lastPickedName}</h2>\n      </Alert>\n\n      <Dialog\n        title=\"Add new name\"\n        isOpen={addNewNameDialogIsOpen}\n        onClose={closeAddNewNameDialog}\n        style={{ width: 320 }}\n      >\n        <form onSubmit={finishAddingNewName}>\n          <div className={Classes.DIALOG_BODY}>\n            <p>\n              <strong>Name to add:</strong>\n            </p>\n            <input\n              type=\"text\"\n              className={[Classes.INPUT, Classes.LARGE].join(' ')}\n              style={{ width: '100%' }}\n              autoFocus\n              value={newName}\n              onChange={(e) => setNewName(e.target.value)}\n            />\n          </div>\n          <div className={Classes.DIALOG_FOOTER}>\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n              <Button intent=\"primary\" type=\"submit\">\n                Add\n              </Button>\n            </div>\n          </div>\n        </form>\n      </Dialog>\n\n      <Button icon=\"plus\" onClick={addNewName}>\n        Add new name\n      </Button>\n      <Button\n        icon=\"random\"\n        onClick={pickRandomName}\n        disabled={names.length < 2}\n      >\n        Pick random name\n      </Button>\n\n      <div id=\"name-list\">\n        {names.map((name, index) => (\n          <Card elevation={Elevation.TWO}>\n            <h5 className={Classes.HEADING}>{name}</h5>\n            <Button onClick={() => removeName(index)}>Remove</Button>\n          </Card>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'normalize.css/normalize.css'\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css'\nimport '@blueprintjs/core/lib/css/blueprint.css'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}